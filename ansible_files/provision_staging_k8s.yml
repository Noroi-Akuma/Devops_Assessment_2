- name: Launch and Configure Staging instance
  hosts: localhost
  connection: local
  # variables to be used in the playbook - making it easier to change values
  vars:
    instance_name: Staging_k8s
    key_name: flask_running_deploy_key
    instance_type: t2.medium
    security_group: flask_running_deploy_sg
    image_id: ami-0866a3c8686eaeeba
    region: us-east-1
    ansible_ssh_private_key_file: ec2_key.pem

  tasks:
    - name: Launch T2 medium instance on EC2
      ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ security_group }}"
        image_id: "{{ image_id }}"
        region: "{{ region }}"
        wait: yes
      register: staging_instance

    - name: Add new instance to host group
      add_host:
        hostname: "{{ staging_instance.instances[0].public_ip_address }}"
        groupname: ec2_staging

- name: Configure Staging instance
  hosts: ec2_staging
  vars:
    ansible_ssh_private_key_file: ec2_key.pem
    remote_ec2_user: ubuntu
  remote_user: "{{ remote_ec2_user }}"
  become: yes
  become_method: sudo

  tasks:
    - name: Add the Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Update apt packages and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ remote_ec2_user }}"
        groups: docker
        append: yes

    - name: Install Python kubernetes module for ansible
      apt:
        name: python3-kubernetes
        state: present
      become: yes

    - name: Install Minikube dependencies
      apt:
          name:
            - conntrack
            - ipset
            - socat
            - ebtables
            - ethtool
            - kubeadm
          state: present
          update_cache: true

    - name: Download Minikube
      get_url:
        url: https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64
        dest: /usr/local/bin/minikube
        mode: '0755'
        retries: 3
        delay: 5
        timeout: 60

    - name: Download kubectl binary
      get_url:
        url: https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'
        retries: 3
        delay: 5
        timeout: 60

    - name: Start Minikube
      shell: minikube start --extra-config=kubeadm.ignore-preflight-errors=NumCPU --force --cpus 1

    # Task to create a Kubernetes deployment
    - name: Create Kubernetes Deployment
      kubernetes.core.k8s:
        kubeconfig: /root/.kube/config  # Ensure the kubeconfig is set correctly
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: flask-deployment
            labels:
              app: flask
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: flask
            template:
              metadata:
                labels:
                  app: flask
              spec:
                containers:
                  - name: flask-app
                    image: flask:latest
                    ports:
                      - containerPort: 5000

    # Task to create a Kubernetes service
    - name: Create Kubernetes Service
      kubernetes.core.k8s:
        kubeconfig: /root/.kube/config
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: flask-service
          spec:
            selector:
              app: flask
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5000
            type: LoadBalancer

